python3 hello.py
python3 -m http.server

https://brightdata.com/blog/how-tos/web-scraping-with-python
pip install requests
pip install beautifulsoup4
pip install selenium



=======VENV virtualenviroment projects for pip install depndancy =====
venv is available by default in Python 3.3 and later, and installs pip into created virtual environments in Python 3.4 and later (Python versions prior to 3.12 also installed Setuptools).
virtualenv needs to be installed separately, but supports Python 2.7+ and Python 3.3+, and pip, 

sudo apt install python3-venv
python3 -m venv dir
source dir/bin/activate
pip install numpy pandas beautifulsoup selenium
deactivate

======pip===========
https://www.cherryservers.com/blog/install-pip-ubuntu

python3 -V
sudo apt install python3-pip -y 
pip3 --version

======= use venv OR pipenv to NOT install packages globally ======
python3 -m venv test_env
ls   test_env
source  test_env/bin/activate 
pip3 install package_name
pip3 show package_name
pip3 install beautifulsoup4 OR pip install beautifulsoup4
pip3 show beautifulsoup4
pip3 list
nano requirements.txt
pip freeze
pip freeze > requirements.txt
pip install -r requirements.txt
numpy==2.2.2
pandas==2.2.3
pip3  install -r requirements.txt OR python3 -m pip install -r requirements.txt
pip3  uninstall package_name
pip3  uninstall numpy
deactivate

=========conda=========
https://docs.conda.io/projects/conda/en/stable/user-guide/getting-started.html

conda install -c conda-forge pandas

======pipenv=========
https://medium.com/analytics-vidhya/why-pipenv-over-venv-for-python-projects-a51fb6e4f31e

python3 -m pip install --user pipenv OR pip install pipenv
cd myproject
pipenv install requests
pipenv run python main.py
### main.py ###
import requests
response = requests.get('https://httpbin.org/ip')
print('Your IP is {0}'.format(response.json()['origin']))

=============pipenv=============
Let’s now move to Pipenv which has now become the recommended way of managing project dependencies. Instead of having a requirements.txt file in your project, and managing virtual environments, we'll now have a Pipfile in our project that does all this stuff automatically. If you have ever worked with Node.js, you might be familiar with the package.json and package-lock.json files. The Pipfile and Pipfile.lock files are similar to them in Python.
Install pipenv

Let’s start by installing Pipenv first in our local machine. Use the following command to do so :

pip install pipenv

Using pipenv for the first time

pipenv install

The above command will look for a Pipenv file. If it doesn’t exist, it will create a new environment and activate it. After the above command is run, we’ll find two new files : Pipenv and Pipenv.lock
Activate already created pipenv environment

pipenv shell

Install/Uninstall dependencies

pipenv install djangopipenv uninstall django

Install dev dependencies

pipenv install nose --dev

Install from requirements.txt

pipenv install -r requirements.txt

Check security vulnerabilities

pipenv check

Check dependency graph

pipenv graph

Run custom scripts

Similar to npm, we can also run custom scripts using pipenv. Suppose we are working on a Django project, we have to run the server using the command :python manage.py runserver . Now we can add this command in our Pipfile, Currently, our Pipfile may look like this :

[[source]]
url = "https://pypi.org/simple"
verify_ssl = true
name = "pypi"
[packages]
django = "*"
[dev-packages]
nose = "*"
[scripts]
server = "python manage.py runserver" 
server = "python -m SimpleHTTPServer"
[requires]
python_version = "3.8"

In the above output, we can see we have added our script in the scripts section. So, now we can simply run the below command to run our server :

pipenv run server

Lock the dependencies

pipenv lock -r

-------------------------------------------------------------------
https://docs.python-guide.org/dev/virtualenvs/

python --version 
pip --version
python -m ensurepip --upgrade
python -m pip install --upgrade pip
sudo apt update
sudo apt install python3-venv python3-pip

Installing Pipenv

Pipenv is a dependency manager for Python projects. If you’re familiar with Node.js’ npm or Ruby’s bundler, it is similar in spirit to those tools. While pip can install Python packages, Pipenv is recommended as it’s a higher-level tool that simplifies dependency management for common use cases.

Use pip to install Pipenv:

$ pip install --user pipenv


Installing packages for your project

Pipenv manages dependencies on a per-project basis. To install packages, change into your project’s directory (or just an empty directory for this tutorial) and run:

$ cd project_folder
$ pipenv install requests

Pipenv will install the excellent Requests library and create a Pipfile for you in your project’s directory. The Pipfile is used to track which dependencies your project needs in case you need to re-install them, such as when you share your project with others. You should get output similar to this (although the exact paths shown will vary):

Using installed packages¶

Now that Requests is installed you can create a simple main.py file to use it:

import requests

response = requests.get('https://httpbin.org/ip')

print('Your IP is {0}'.format(response.json()['origin']))

Then you can run this script using pipenv run:

$ pipenv run python main.py

You should get output similar to this:

Your IP is 8.8.8.8

Using $ pipenv run ensures that your installed packages are available to your script. It’s also possible to spawn a new shell that ensures all commands have access to your installed packages with $ pipenv shell.

